#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Twist.h"
#include "std_msgs/Float64.h"
#include "std_msgs/Int64.h"
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <math.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#define PI 3.14159265
#define l1 105
#define l2 110 //real distance
#define l3 18

static const std::string OPENCV_WINDOW = "Image window";
int xPose=-10;
int yPose=-10;
float zPose=0.0;
float end_signal=0.0;
float extra=0.0;
int count=0,count_1=0;
int navigation_signal=0;
class ImageConverter
{
  ros::NodeHandle nh_;
  image_transport::ImageTransport it_;
  image_transport::Subscriber image_sub_;
  ros::Subscriber image_pose_sub_;
  ros::Subscriber extra_sub_;
  ros::Subscriber signal_sub_;
  ros::Subscriber navigation_signal_;
  //image_transport::Publisher image_pub_;
  ros::Publisher choose_sub_;
  ros::Publisher pose_signal_pub_;
  ros::Publisher image_pose_move_;
  ros::Publisher robot_back;
  ros::Publisher navigation_signal_end;
  ros::Publisher camera_signal_end;
  
public:
  ImageConverter()
    : it_(nh_)
  {
    // Subscrive to input video feed and publish output video feed
    image_pose_sub_ = nh_.subscribe("image_pose", 1, &ImageConverter::imageposeCb, this);
    extra_sub_ = nh_.subscribe("extra", 1, &ImageConverter::extradistanceCb, this);
    signal_sub_ = nh_.subscribe("pickup_end/command", 1, &ImageConverter::signalCb, this);
    navigation_signal_= nh_.subscribe("navigation_signal_end", 1, &ImageConverter::navigationCb, this);
    image_sub_ = it_.subscribe("/camera/depth/image_raw", 1, &ImageConverter::imageCb, this);

    //image_pub_ = it_.advertise("/image_converter/output_video", 1);
    choose_sub_ = nh_.advertise<geometry_msgs::Point>("/choose_begin",1);
    pose_signal_pub_ = nh_.advertise<std_msgs::Float64>("/pose_signal",1);
    image_pose_move_ = nh_.advertise<geometry_msgs::Point>("image_pose_move",1);
    robot_back = nh_.advertise<geometry_msgs::Twist>("/cmd_vel_mux/input/teleop",1);
    navigation_signal_end = nh_.advertise<std_msgs::Int64>("navigation_signal_end",1);
    camera_signal_end = nh_.advertise<std_msgs::Int64>("camera_signal_end",1);


    //cv::namedWindow(OPENCV_WINDOW);
  }

  ~ImageConverter()
  {
    cv::destroyWindow(OPENCV_WINDOW);
  }

  void navigationCb(std_msgs::Int64 msg)
  {
	navigation_signal=msg.data;
        //ROS_INFO("extra: %d", 1);
        //system("rosnode kill web_video_server");
  }

  void signalCb(std_msgs::Float64 msg_signal)
  {
	end_signal=msg_signal.data;
  }
  void extradistanceCb(std_msgs::Float64 msg_extra)
  {
	extra=msg_extra.data;
	ROS_INFO("extra: %f", extra);
  }

  void imageposeCb(geometry_msgs::Point msg)
  {
     ros::Rate loopRate(15);

     if(navigation_signal>0)
     {
     xPose=int(msg.x*1.5);
     yPose=int(msg.y*1.45);
     zPose=-msg.z;
     }

     if(xPose>0&&yPose>0)
	{
	ROS_INFO("xPose: %d", xPose);
	ROS_INFO("yPose: %d", yPose);
	ROS_INFO("zPose: %f", zPose);
	ROS_INFO("count: %d", count);
	count++;
	std_msgs::Float64 pose_signal_1;
	pose_signal_1.data=1.0;
        int time_0=0;

	while(ros::ok())
	{
	pose_signal_pub_.publish(pose_signal_1);
	ROS_INFO("count-1: %d", count);
	time_0++;
	loopRate.sleep();
	if(time_0>3)
	break;
	}

	}

	if(count>5&&fabs(zPose)<=0.15)
	{
	geometry_msgs::Twist twist;
	twist.linear.x=-0.1;
	twist.linear.y=0.0;
  	twist.linear.z=0.0;

	twist.angular.x=0.0;
	twist.angular.y=0.0;
	twist.angular.z=0.0;
	int time=0;

	while(ros::ok())
	{
	robot_back.publish(twist);
	time++;
	loopRate.sleep();
	if(time>3)
	break;
	}
	count=0;
	xPose=-10;
	yPose=-10;
	zPose=0.0;

	std_msgs::Float64 pose_signal_2;
	pose_signal_2.data=0.0;
        int empty=0;

	while(ros::ok())
	{
	empty++;
	loopRate.sleep();
	if(empty>8)
	break;
	}

	int time_1=0;

	while(ros::ok())
	{
	pose_signal_pub_.publish(pose_signal_2);
	time_1++;
	loopRate.sleep();
	if(time_1>3)
	break;
	}
	}
  }
  void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {
	ros::Rate loopRate(15);
	std_msgs::Float64 pose_signal_end;
	geometry_msgs::Point robot_move;

	if(fabs(zPose)>0.15)
	{
	float theata=0.0,distance=0.0,back=0.0;
	if(zPose<=0)
	{
	theata=-0.3;
	}
	else
	{
	theata=0.3;
	}

	ros::Rate loopRate(15);
	geometry_msgs::Twist twist_1;
	twist_1.linear.x=0.0;
	twist_1.linear.y=0.0;
  	twist_1.linear.z=0.0;

	twist_1.angular.x=0.0;
	twist_1.angular.y=0.0;
	twist_1.angular.z=theata;
	int time_1=0;

	while(ros::ok())
	{
	robot_back.publish(twist_1);
	time_1++;
	loopRate.sleep();
	if(time_1>3)
	break;
	}
	count=0;
	xPose=-10;
	yPose=-10;
	zPose=0.0;

	std_msgs::Float64 pose_signal_2;
	pose_signal_2.data=0.0;
	int time_2=0;

	while(ros::ok())
	{
	pose_signal_pub_.publish(pose_signal_2);
	time_2++;
	loopRate.sleep();
	if(time_2>3)
	break;
	}


	}

    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::TYPE_16UC1);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }

    int depth=0;
    depth = cv_ptr->image.at<short int>(cv::Point(xPose,yPose));//you can change 320,240 to your interested pixel
    if(depth>=500&&depth<=1000&&end_signal<0.1&&xPose>0&&yPose>0&&fabs(zPose)<=0.15)
    {
	count=0;
        geometry_msgs::Point choose_object_pose;
        float distance1=0.0;
	float distance2=0.0;
	float theata=0.0;
//	if(zPose>0)
//	{
//	   distance1=(depth*tan(zPose))+extra*10.0;
//	}
//	else
//	{
//	   distance1=(depth*tan(zPose))-extra*10.0;
//	}
	distance1=(depth*tan(zPose));//-extra*10.0);
	//distance1=distance1+20;
	distance2=sqrt(distance1*distance1+(depth-l1)*(depth-l1));
	theata=atan2(distance1,(depth-l2));
        choose_object_pose.x=(distance2/10.0)+extra;
        choose_object_pose.y=10;
        choose_object_pose.z=theata;
	ROS_INFO("Depth:  %d", depth);
	ROS_INFO("Depth1: %f", choose_object_pose.x);
	ROS_INFO("Theata: %f", choose_object_pose.z);
      	if(choose_object_pose.x<=45.5&&choose_object_pose.x>30)
	{
        choose_sub_.publish(choose_object_pose);
	std_msgs::Float64 pose_signal_2;
	std_msgs::Int64 end;
	pose_signal_2.data=0.0;
        end.data=0.0;
	int time_3=0;

	while(ros::ok())
	{
	pose_signal_pub_.publish(pose_signal_2);
	time_3++;
	loopRate.sleep();
	if(time_3>3)
	break;
	}
    	navigation_signal=0;
        
        int time_end=0;

	   while(ros::ok())
	   {
	     navigation_signal_end.publish(end);
 	     camera_signal_end.publish(end);
	     time_end++;
	     loopRate.sleep();
	     if(time_end>5)
	       break;
	    }

	//count_1=1;
	}
	else if(choose_object_pose.x>45.5)
	{

	float theata=0.0,distance=0.0,back=0.0;

	distance=(depth-530)/1000.0;

	ros::Rate loopRate(15);
	geometry_msgs::Twist twist_2;
	twist_2.linear.x=0.1;
	twist_2.linear.y=0.0;
  	twist_2.linear.z=0.0;

	twist_2.angular.x=0.0;
	twist_2.angular.y=0.0;
	twist_2.angular.z=0.0;
	int time_4=0;

	while(ros::ok())
	{
	robot_back.publish(twist_2);
	time_4++;
	loopRate.sleep();
	if(time_4>3)
	break;
	}
	count=0;
	std_msgs::Float64 pose_signal_2;
	pose_signal_2.data=0.0;
	int time_5=0;

	while(ros::ok())
	{
	pose_signal_pub_.publish(pose_signal_2);
	time_5++;
	loopRate.sleep();
	if(time_5>3)
	break;
	} 

	}

	xPose=-10;
	yPose=-10;
	zPose=0.0;
	distance2=0.0;
    } 
	if(xPose>0&&yPose>0)
	{

	std_msgs::Float64 pose_signal_2;
	pose_signal_2.data=0.0;
	int time_6=0;
	while(ros::ok())
	{
	pose_signal_pub_.publish(pose_signal_2);
	time_6++;
	loopRate.sleep();
	if(time_6>3)
	break;
	}
 
	}
  }
};

int main(int argc, char* argv[])
{
  ros::init(argc, argv, "distance");

  ImageConverter ic;
  ros::spin();
  return 0;
}

